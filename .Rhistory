library(dplyr)
# Build a Date Converter from a string formatted "mm/dd/YYYY" to a proper date datatype in R
setAs("character", "rpwDateConvert", function(from) as.Date(from, format="%m/%d/%Y") )
# Read the data provided by the CDC/NHCS
WeeklyDeathsThisYear <- read.csv('Weekly_Counts_of_Deaths_by_State_and_Select_Causes__2019-2020.csv',
colClasses=c("Week.Ending.Date"="rpwDateConvert"),  # Convert to a date format
header=T) # Read the first line and use it as a header
# Remove the last couple of weeks from the measure because of the lagging measure.
# This is discussed below in the notebook.
maxWeekIDX.2020 = max(filter(WeeklyDeathsThisYear, MMWR.Year==2020)$MMWR.Week)  - 2
# Filter so we have just the New York rows and the year, week, and overal death counts
FLDeathsThisYear <- subset(filter(WeeklyDeathsThisYear,
Jurisdiction.of.Occurrence == 'Florida',  # Just FL
MMWR.Week <= maxWeekIDX.2020,             # Just first n-2 weeks
MMWR.Year == 2020),                       # Just 2020
# vvv Just the following fields vvv
select = c(Jurisdiction.of.Occurrence,MMWR.Year,MMWR.Week,Week.Ending.Date,All.Cause))
# Show the top few rows of this subset
head(FLDeathsThisYear)
library(ggplot2)
myPlot <- ggplot(FLDeathsThisYear, aes(x=Week.Ending.Date, y=All.Cause)) +
geom_point(size=2, color="firebrick") +
geom_line(size=1, color="firebrick") +
xlab("Week") +
ylab("Total Reported Deaths in FL (each Week)") +
theme(text=element_text(family="Times", size=16))
print(myPlot)
library(dplyr)
# Build a Date Converter from a string formatted "dd/mm/YYYY" to a proper date datatype in R
setAs("character", "rpwDateConvert", function(from) as.Date(from, format="%d/%m/%Y") )
# Read the data provided by the CDC/NHCS for 2019-2020, then read the 2014-2018 data
WeeklyDeaths.2019.2020 <- read.csv('Weekly_Counts_of_Deaths_by_State_and_Select_Causes__2019-2020.csv',
colClasses=c("Week.Ending.Date"="rpwDateConvert"),  # Convert to a date format
header=T) # Read the first line and use it as a header
WeeklyDeaths.2014.2018 <- read.csv('Weekly_Counts_of_Deaths_by_State_and_Select_Causes__2014-2018.csv',
colClasses=c("Week.Ending.Date"="rpwDateConvert"),  # Convert to a date format
header=T) # Read the first line and use it as a header
# Filter so we have just the New York rows and the year, week, and overal death counts
FLDeaths.A <- subset(filter(WeeklyDeaths.2019.2020,
Jurisdiction.of.Occurrence == 'Florida'),  # Just Florida
select = c(Jurisdiction.of.Occurrence,MMWR.Year,MMWR.Week,Week.Ending.Date,All.Cause))
# Put this is a mergable form because the column names differ a bit between the datasets
FLDeaths.AA <- data.frame(Year= FLDeaths.A$MMWR.Year,
Week = FLDeaths.A$Week.Ending.Date,
WeekIDX = FLDeaths.A$MMWR.Week,
TotalDeaths = FLDeaths.A$All.Cause)
# Filter so we have just the New York rows and the year, week, and overal death counts
FLDeaths.B <- subset(filter(WeeklyDeaths.2014.2018,
Jurisdiction.of.Occurrence == 'Florida'),  # Just Florida
select = c(Jurisdiction.of.Occurrence,MMWR.Year,MMWR.Week,Week.Ending.Date,All..Cause))
# Put this is a mergable form because the column names differ a bit between the datasets
FLDeaths.BB <- data.frame(Year= FLDeaths.B$MMWR.Year,
Week = FLDeaths.B$Week.Ending.Date,
WeekIDX = FLDeaths.B$MMWR.Week,
TotalDeaths = FLDeaths.B$All..Cause)
# Combine the two datasets so we have all years from 2014 through 2020
FLDeaths <- mutate(rbind(FLDeaths.AA, FLDeaths.BB),
ThisYear=(Year==2020))   # We'll use this field later to highlight 2020
library(ggplot2)
myPlot <- ggplot(FLDeaths, aes(x=WeekIDX, y=TotalDeaths, group=Year, color=ThisYear)) +
geom_line(size=1) +
scale_color_manual(values=c("darkgray", "firebrick"), labels=c("Other Years", "2020"), name="") +
xlab("Week") +
ylab("Total Reported Deaths in FL (each Week)") +
theme(text=element_text(family="Times", size=16))
print(myPlot)
View(FLDeathsThisYear)
View(CovidAttributedDeaths)
library(dplyr)
# Build a Date Converter from a string formatted "dd/mm/YYYY" to a proper date datatype in R
setAs("character", "rpwDateConvert", function(from) as.Date(from, format="%m/%d/%Y") )
# Read the data provided by the CDC/NHCS
CovidAttributedDeaths <- read.csv('Provisional_Death_Counts_for_Coronavirus_Disease__COVID-19_.csv',
colClasses=c("Date.as.of"="rpwDateConvert"),  # Convert to a date format
header=T) # Read the first line and use it as a header
# Grab the counts for FL
FLCovidDeaths <- filter(CovidAttributedDeaths, State == "Florida")
# What's the biggest number they have!
totalFLDeaths = max(FLCovidDeaths$All.COVID.19.Deaths..U07.1.)
cat('How many deaths has the CDC attributed to COVID through end of April 25?  ', totalFLDeaths, '\n')
View(CovidAttributedDeaths)
library(ddplyr)
library(dplyr)
filter(CovidAttributedDeaths, Indicator=="Total US")
filter(CovidAttributedDeaths, Indicator=="Florida")
CovidAttributedDeaths <- read.csv('Provisional_Death_Counts_for_Coronavirus_Disease__COVID-19_.csv',
colClasses=c("Date.as.of"="rpwDateConvert"),  # Convert to a date format
header=T) # Read the first line and use it as a header
library(dplyr)
# Build a Date Converter from a string formatted "dd/mm/YYYY" to a proper date datatype in R
setAs("character", "rpwDateConvert", function(from) as.Date(from, format="%m/%d/%Y") )
# Read the data provided by the CDC/NHCS
CovidAttributedDeaths <- read.csv('Provisional_COVID-19_Death_Counts_by_Week_Ending_Date_and_State.csv',
colClasses=c("Date.as.of"="rpwDateConvert"),  # Convert to a date format
header=T) # Read the first line and use it as a header
# Grab the counts for FL
FLCovidDeaths <- filter(CovidAttributedDeaths, State == "Florida")
# What's the biggest number they have!
totalFLDeaths = max(FLCovidDeaths$All.COVID.19.Deaths..U07.1.)
cat('How many deaths has the CDC attributed to COVID through end of April 25?  ', totalFLDeaths, '\n')
View(FLCovidDeaths)
totalFLDeaths = sum(FLCovidDeaths$COVID.19.Deaths)
totalFLDeaths
FLCovidDeaths$COVID.19.Deaths
na.omit(FLCovidDeaths$COVID.19.Deaths)
sum(na.omit(FLCovidDeaths$COVID.19.Deaths))
lastWeekDate <- max(FLCovidDeaths$Start.week)
lastWeekDate
library(dplyr)
# Build a Date Converter from a string formatted "dd/mm/YYYY" to a proper date datatype in R
setAs("character", "rpwDateConvert", function(from) as.Date(from, format="%m/%d/%Y") )
# Read the data provided by the CDC/NHCS
CovidAttributedDeaths <- read.csv('Provisional_COVID-19_Death_Counts_by_Week_Ending_Date_and_State.csv',
colClasses=c("Date.as.of"="rpwDateConvert"),  # Convert to a date format
header=T) # Read the first line and use it as a header
# Grab the counts for FL
FLCovidDeaths <- filter(CovidAttributedDeaths, State == "Florida")
# What's the biggest number they have!
totalFLDeaths = sum(na.omit(FLCovidDeaths$COVID.19.Deaths))
lastWeekDate <- max(FLCovidDeaths$Start.week)
cat('How many deaths has the CDC attributed to COVID through end of ',
lastWeekDete, '?   ', totalFLDeaths, '\n')
library(dplyr)
# Build a Date Converter from a string formatted "dd/mm/YYYY" to a proper date datatype in R
setAs("character", "rpwDateConvert", function(from) as.Date(from, format="%m/%d/%Y") )
# Read the data provided by the CDC/NHCS
CovidAttributedDeaths <- read.csv('Provisional_COVID-19_Death_Counts_by_Week_Ending_Date_and_State.csv',
colClasses=c("Date.as.of"="rpwDateConvert"),  # Convert to a date format
header=T) # Read the first line and use it as a header
# Grab the counts for FL
FLCovidDeaths <- filter(CovidAttributedDeaths, State == "Florida")
# What's the biggest number they have!
totalFLDeaths = sum(na.omit(FLCovidDeaths$COVID.19.Deaths))
lastWeekDate <- max(FLCovidDeaths$Start.week)
cat('How many deaths has the CDC attributed to COVID through end of ',
lastWeekDate, '?   ', totalFLDeaths, '\n')
FLDeaths.2020
# First get only the week indexes for any year that can be compared to 2020
#  Subtract a couple weeks because of the lagging indicator and to be consistent with the COVID dates
maxWeekIDX <- max(filter(FLDeaths, Year==2020)$WeekIDX) - 2
FLDeaths.abridged <- filter(FLDeaths,
WeekIDX <= maxWeekIDX,  # All weeks up to the latest in 2020
Year != 2020)           # All years *other than* 2020
# Now let's find the average death counts for all years *other* than 2020 across each week
AggDeathCounts <- summarize(group_by(FLDeaths.abridged, WeekIDX), AvgDeathCount.pre2020 = mean(TotalDeaths))
# Now let's accumulate them:
totalPre2020Deaths <- sum(AggDeathCounts$AvgDeathCount.pre2020)
# Now we'll accumulate deaths for 2020:
FLDeaths.2020 <- filter(FLDeaths, Year==2020)
total2020Deaths <- sum(FLDeaths.2020$TotalDeaths)
# Here's the difference:
cat('How many more deaths than typical so far (on average) through end of Mid-July?  ', total2020Deaths - totalPre2020Deaths, '\n')
FLDeaths.2020
totalFLDeaths
totalPre2020Deaths
total2020Deaths
total2020Deaths - totalPre2020Deaths
(total2020Deaths - totalPre2020Deaths)/8276
(total2020Deaths - totalPre2020Deaths) - 8276
austinSize <- 50950
ucfSize <- 66183
449/austinSize
449/austinSize * 100
438/ucfSize * 100
1/6200*100
.88/.66
9/7
mean(c(98.7,86.8,78.2,95.12,90,100,92.6,93.1,89.9))
2088 * (9/12)
(8*15)/1566
.08*98
.92*98
rcauchy(100)
plot(rcauchy(100), rcauchy(100))
hist(rcauchy(1000, scale=1.5))
hist(rcauchy(1000, scale=10))
hist(rcauchy(1000, scale=100))
hist(rcauchy(1000, scale=1000))
hist(rcauchy(1000, scale=10))
hist(rcauchy(1000, scale=5))
theta <- rcauchy(100, scale=5)
rho <- rcauchy(100, scale=5)
plot(rho*cos(theta), rho*sin(theta))
x = rho*cos(theta); y = rho*sin(theta))
x = rho*cos(theta); y = rho*sin(theta)
x
y
mean(x)
mean(y0)
mean(y)
rcauchy(1000)
hist(rcauchy(1000))
matrix(rcauchy(1000),ncol=100)
apply(matrix(rcauchy(1000),ncol=100),2,mean)
hist(apply(matrix(rcauchy(1000),ncol=100),2,mean))
hist(apply(matrix(rcauchy(10000),ncol=100),2,mean))
rweibull(1000)
rweibull(1000, shape=1.5)
hist(apply(matrix(rweibull(10000,shape=1.5),ncol=100),2,mean))
hist(apply(matrix(rweibull(100000,shape=1.5),ncol=100),2,mean))
hist(apply(matrix(rweibull(1000000,shape=1.5),ncol=100),2,mean))
x = seq(from=-10, to=10, by 0.25)
x = seq(from=-10, to=10, by=0.25)
y = (-8/3)*x + (28/3)
plot(x,y, type='l')
grid()
plot(x,y, type='l', xlim=c(-10,30), ylim=c(-10,30))
gird()
grid()
60*1.5
7997.5-2633
(7997.5-2633)/7.5
818/12
715/68
55/196
.25*2633
(7997.5-700)/7.5
973/7.5
129/68
973/68
.2*196
29.6* 1000000
29.6* 1000000 / 965000
965000/ (29.6* 1000000)
196000/ (6.61 * 1000000)
196/2
98000/ (29.6* 1000000)
98000/ (6.61 * 1000000)
10/13
trump <- 2965636
biden <- 2290624
joj <- 63281
total <- 299 + 229
biden <- 229
trump <- 296
total <- 299 + 229 + 140
total
(biden + 0.6*140)/total
(biden + 0.8*140)/total
(biden + 0.78*140)/total
(biden + 0.76*140)/total
213+3+20+16
213+3+20+16+15
238+6+10+16
2.7+2.6
.05*(2.7+2.6)
(100/.05)*(2.7+2.6)
100/.05
100/.95
(100/95)*(2.7*2.6)
0.5*(100/95)*(2.7*2.6)
3.7-2.6
160389+1609879
(160389-1609879)/(160389+1609879)
(1630389-1609)/(160389+1609879)
(1630389-1609879)/(1630389+1609879)
.001 * (1630389-1609879)/(1630389+1609879)
100 * (1630389-1609879)/(1630389+1609879)
tr = 3270273
bi = 3217052
tr - bi
ballots <- 250666
(tr + bi + ballots)
0.5*(tr + bi + ballots)
bi  - 0.5*(tr + bi + ballots)
(bi  - 0.5*(tr + bi + ballots)) / ballots
ballots*.61
bi + ballots*.61
tr + ballots *.39
bi
tr
4253913*.88
4253913*.12
1528319+1382062+42753
(100/88)*(1528319+1382062+42753)
.12*(100/88)*(1528319+1382062+42753)
(100/88)*(1528319+1382062+42753)
0.5*3355834
1528319-0.5*3355834
150/403
82-55.7
55+38+29+29+20+20+18
setwd('/Users/rwiegand/Documents/Academics/CourseMaterial/csci208-Fall2020/Stats')
ex3 <- read.csv('Ex3.csv')
ex3.Exam3
View(ex3)
colnames(ex3)
ex3$Exam3
source('vis-grades.r')
rpwQQ(ex3$Exam3)
setwd('/Users/rwiegand/Projects/snsea')
source('~/Projects/snsea/graphs.r')
plotChildCoverRatio()
system('open unbounded-rv-s01-r045-childcover.pdf')
system('cp unbounded-rv-s01-r045-childcover.pdf ~/.')
plotChildCoverRatio()
system('open unbounded-rv-s01-r045-childcover.pdf')
system('cp unbounded-rv-s01-r045-childcover.pdf ~/.')
